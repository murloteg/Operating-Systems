1.a.1: чем обусловлено большое кол-во системных вызовов? Какой syscall используется для вывода "Hello, World!"?
---> функция printf является оберткой для syscall'а write.
Его синтаксис следующий: write(int fd, const void* buf, size_t count).
В моём случае: fd = 1 [stdin], buf = "Hello, World!\n", count = 14.

---Небольшой разбор вывода strace---
execve("./hello.exec", ["./hello.exec"], 0x7ffd7f2ad2d0 /* 24 vars */) = 0
"Syscall, который выполняет программу, заданную параметром filename; принимает char* const argv[]; char *const envp[] - окружение"

brk(NULL)                               = 0x5569a0cc1000
"Syscall brk устанавливает конец сегмента данных в значение, на которое указывает void* end_data_segment"

arch_prctl(0x3001 /* ARCH_??? */, 0x7ffeaf96d510) = -1 EINVAL (Invalid argument)
mmap(NULL, 8192, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f8ee2e25000
"Syscall mmap отображает length байт в память, начиная с адреса void* start"

access("/etc/ld.so.preload", R_OK)      = -1 ENOENT (No such file or directory)
"Syscall access проверяет прав на доступ к файлу или само существование файла"

openat(AT_FDCWD, "/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 3
newfstatat(3, "", {st_mode=S_IFREG|0644, st_size=22195, ...}, AT_EMPTY_PATH) = 0
mmap(NULL, 22195, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f8ee2e1f000
close(3)                                = 0
openat(AT_FDCWD, "/lib/x86_64-linux-gnu/libc.so.6", O_RDONLY|O_CLOEXEC) = 3
read(3, "\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0P\237\2\0\0\0\0\0"..., 832) = 832
pread64(3, "\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0"..., 784, 64) = 784
pread64(3, "\4\0\0\0 \0\0\0\5\0\0\0GNU\0\2\0\0\300\4\0\0\0\3\0\0\0\0\0\0\0"..., 48, 848) = 48
pread64(3, "\4\0\0\0\24\0\0\0\3\0\0\0GNU\0i8\235HZ\227\223\333\350s\360\352,\223\340."..., 68, 896) = 68
newfstatat(3, "", {st_mode=S_IFREG|0644, st_size=2216304, ...}, AT_EMPTY_PATH) = 0
pread64(3, "\6\0\0\0\4\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0@\0\0\0\0\0\0\0"..., 784, 64) = 784
mmap(NULL, 2260560, PROT_READ, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0x7f8ee2bf7000
mmap(0x7f8ee2c1f000, 1658880, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x28000) = 0x7f8ee2c1f000
mmap(0x7f8ee2db4000, 360448, PROT_READ, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x1bd000) = 0x7f8ee2db4000
mmap(0x7f8ee2e0c000, 24576, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x214000) = 0x7f8ee2e0c000
mmap(0x7f8ee2e12000, 52816, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0x7f8ee2e12000
close(3)                                = 0
mmap(NULL, 12288, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f8ee2bf4000
arch_prctl(ARCH_SET_FS, 0x7f8ee2bf4740) = 0
set_tid_address(0x7f8ee2bf4a10)         = 156553
set_robust_list(0x7f8ee2bf4a20, 24)     = 0
rseq(0x7f8ee2bf50e0, 0x20, 0, 0x53053053) = 0
mprotect(0x7f8ee2e0c000, 16384, PROT_READ) = 0
mprotect(0x5569a0393000, 4096, PROT_READ) = 0
mprotect(0x7f8ee2e5f000, 8192, PROT_READ) = 0
prlimit64(0, RLIMIT_STACK, NULL, {rlim_cur=8192*1024, rlim_max=RLIM64_INFINITY}) = 0
munmap(0x7f8ee2e1f000, 22195)           = 0
newfstatat(1, "", {st_mode=S_IFCHR|0620, st_rdev=makedev(0x88, 0x6), ...}, AT_EMPTY_PATH) = 0
getrandom("\x86\xc8\x89\xf6\x2a\x87\x31\xf5", 8, GRND_NONBLOCK) = 8
brk(NULL)                               = 0x5569a0cc1000
brk(0x5569a0ce2000)                     = 0x5569a0ce2000
write(1, "Hello, World!\n", 14Hello, World!
)         = 14
exit_group(0)                           = ?
+++ exited with 0 +++
---Конец разбора---


1.a.2: убедиться, что явный вызов syscall'а write() присутствует в выводе strace.
---> write(1, "Hello, World!\n", 14Hello, World!
     )         = 14


1.a.3: аналогично, проверить вывод strace.
write(1, "Hello, World!\n", 14Hello, World!
)         = 14


1.b: посмотреть статистику можно с помощью ключа -c
